on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'MiljÃ¸ (q1, q2 eller prod)'
        required: true
        default: 'q1'

env:
  IMAGE: ghcr.io/${{ github.repository }}/melosys-fakturering:${{ github.sha }}
  IMAGE_MANIFEST: https://ghcr.io/v2/${{ github.repository }}/melosys-fakturering/manifests/${{ github.sha }}

# fakturaoppdrag

jobs:
  check_docker_image_exists:
    name: Sjekk hvis Docker-image eksisterer i registry
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "DOCKER_IMAGE_EXISTS_HTTP_STATUS=$(curl -X GET -s -o /dev/null -w "%{http_code}" ${{ env.IMAGE_MANIFEST }} -u ${{ github.actor }}:${{ secrets.GITHUB_TOKEN }})" >> $GITHUB_ENV
      - id: set_output
        run: |
          if [ ${{ env.DOCKER_IMAGE_EXISTS_HTTP_STATUS }} -eq 200 ]
          then
            echo "::set-output name=exists::true"
          else
            echo "::set-output name=exists::false"
          fi
    outputs:
      exists: ${{ steps.set_output.outputs.exists }}

  build:
    name: Build og push Docker image
    runs-on: ubuntu-latest
    needs: check_docker_image_exists
    if: needs.check_docker_image_exists.outputs.exists != 'true'
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PASSWORD: ${{ secrets.READER_TOKEN }}
      REGISTRY: ghcr.io
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Setup gradle dependency cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/.*gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.READER_TOKEN }}
      - name: Bygg og test
        run: ./gradlew shadowJar --info
      - name: GitHub Package Registry login
        run: |
          echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_REPOSITORY} --password-stdin ghcr.io
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Bygg og publiser Docker-image
        run: |
          docker build -t ${IMAGE} .
          docker push ${IMAGE}

  deploy:
    runs-on: ubuntu-latest
    needs: [ build, docker ]
    if: always() && (needs.build.result == 'success' || needs.build.result == 'skipped')
    steps:
      - uses: actions/checkout@v3
      - uses: nais/deploy/actions/deploy@v1
        if: ${{ env.CLUSTER != '' }}
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: ${{ env.CLUSTER }}
          RESOURCE: nais.yml
          VARS: nais/vars-${{github.event.inputs.environment}}.json
      - name: Get commit message
        run: echo "COMMIT_MSG=$(git log --format=%s -n 1)" >> $GITHUB_ENV
      - name: Slack Notification
        if: ${{ env.CLUSTER != '' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: "${{ job.status == 'success' && 'good' || 'danger' }}"
          SLACK_USERNAME: Github Actions
          SLACK_ICON: https://github.com/github.png?size=48
          SLACK_TITLE: "melosys-fakturering ${{ job.status == 'success' && 'ble deployet' || 'kunne ikke deployes' }} til ${{ env.ENVIRONMENT }}"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: ${{ env.COMMIT_MSG }}
